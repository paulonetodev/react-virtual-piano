[{"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/index.js":"1","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/App.js":"2","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/utils/midiParser.js":"3","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/utils/constants.js":"4","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/utils/array.js":"5","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/Notes.js":"6","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/Piano.js":"7","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useWindowDimensions.js":"8","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useSoundFont.js":"9","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/SelectList.js":"10","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useMidiInputs.js":"11","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useMidiController.js":"12","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/ControlledPiano.js":"13","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useRefDimensions.js":"14","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/index.js":"15","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/components/App.js":"16","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/components/ControlledPiano.js":"17","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/components/Piano.js":"18","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/hooks/useMidiController.js":"19","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/utils/constants.js":"20","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/utils/midiParser.js":"21","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/components/SelectList.js":"22","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/hooks/useSoundFont.js":"23","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/hooks/useRefDimensions.js":"24","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/hooks/useMidiInputs.js":"25"},{"size":157,"mtime":1612361233304,"results":"26","hashOfConfig":"27"},{"size":345,"mtime":1613160005278,"results":"28","hashOfConfig":"27"},{"size":2797,"mtime":1613144617104,"results":"29","hashOfConfig":"27"},{"size":2827,"mtime":1613138879374,"results":"30","hashOfConfig":"27"},{"size":230,"mtime":1612535879512,"results":"31","hashOfConfig":"27"},{"size":320,"mtime":1612549279417,"results":"32","hashOfConfig":"27"},{"size":8764,"mtime":1613156917490,"results":"33","hashOfConfig":"27"},{"size":591,"mtime":1612784395212,"results":"34","hashOfConfig":"27"},{"size":1744,"mtime":1613140691619,"results":"35","hashOfConfig":"27"},{"size":756,"mtime":1612992154914,"results":"36","hashOfConfig":"27"},{"size":1063,"mtime":1613073636416,"results":"37","hashOfConfig":"27"},{"size":2628,"mtime":1613149307207,"results":"38","hashOfConfig":"27"},{"size":5540,"mtime":1613154201256,"results":"39","hashOfConfig":"27"},{"size":915,"mtime":1613155970349,"results":"40","hashOfConfig":"27"},{"size":157,"mtime":1612361233304,"results":"41","hashOfConfig":"42"},{"size":342,"mtime":1613161496151,"results":"43","hashOfConfig":"42"},{"size":5540,"mtime":1613154201256,"results":"44","hashOfConfig":"42"},{"size":8764,"mtime":1613156917490,"results":"45","hashOfConfig":"42"},{"size":2628,"mtime":1613149307207,"results":"46","hashOfConfig":"42"},{"size":2827,"mtime":1613138879374,"results":"47","hashOfConfig":"42"},{"size":2797,"mtime":1613144617104,"results":"48","hashOfConfig":"42"},{"size":756,"mtime":1612992154914,"results":"49","hashOfConfig":"42"},{"size":1744,"mtime":1613140691619,"results":"50","hashOfConfig":"42"},{"size":915,"mtime":1613155970349,"results":"51","hashOfConfig":"42"},{"size":1063,"mtime":1613073636416,"results":"52","hashOfConfig":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"17nsxxk",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cf7b1d",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/index.js",[],["107","108"],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/App.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/utils/midiParser.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/utils/constants.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/utils/array.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/Notes.js",[],["109","110"],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/Piano.js",["111"],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useWindowDimensions.js",[],["112","113"],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useSoundFont.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/SelectList.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useMidiInputs.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useMidiController.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/components/ControlledPiano.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/notes/src/hooks/useRefDimensions.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/index.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/components/App.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/components/ControlledPiano.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/components/Piano.js",["114"],"import { useMemo, useEffect, useState, useRef } from 'react';\nimport './style/Piano.css';\nimport {\n  getFullNote,\n  isWhiteKey,\n  getMidiKeyCode,\n  whiteKeysAmount,\n} from '../utils/midiParser';\nimport useRefDimensions from '../hooks/useRefDimensions';\n\n// note should be a white key\n// this function returns the amount of space the note before \"note\" takes in the note span\n// used by getBlackKeyOffset\nconst _getInitialOffset = (note, W, B, L, L1, L2) => {\n  if (!isWhiteKey(note)) {\n    console.log('note should be a white key.');\n    return 0;\n  }\n  //get the note in the string format\n  let key = getFullNote(note);\n\n  switch (key[0]) {\n    case 'E':\n      return W - L1;\n    case 'B':\n      return W - L2;\n    case 'D':\n      return (W - L) / 2;\n    case 'G':\n      return W - L - B / 2;\n    case 'A':\n      return B / 2;\n    default:\n      return 0;\n  }\n};\n\n//function that returns the black key offset from the initial key.\nconst getBlackKeyOffset = (note, initialNote, W, B, L, L1, L2) => {\n  let leftOffset = _getInitialOffset(initialNote, W, B, L, L1, L2);\n\n  for (let i = initialNote; i < note; i++) {\n    if (!isWhiteKey(i)) {\n      leftOffset += B;\n    } else {\n      let key = getFullNote(i)[0];\n      switch (key) {\n        case 'C':\n        case 'E':\n          leftOffset += L1;\n          break;\n        case 'F':\n        case 'B':\n          leftOffset += L2;\n          break;\n        default:\n          leftOffset += L;\n      }\n    }\n  }\n\n  return leftOffset;\n};\n\n//props:\n//        optional: [initialNote, finalNote, pressedKeys, fitHorizontally, alignCenter, noteWidth, whiteNoteWidth, whiteNoteHeight , blackNoteWidth, blackNoteHeight]\n//        [whiteNoteWidth, whiteNoteHeight , blackNoteWidth and blackNoteHeight] will take priority over noteWidth\n// initialNote and finalNote will be converted to white keys if necessary (the next one for the initial and previous one for the final)\n// fitHorizontally takes priority over alignCenter, the difference is that fit horizontally takes the entire container and increases vertically as necessary\n// alignCenter lets you customize the key sizes\nconst Piano = (props) => {\n  // const targetRef = useRef(); //used in the container\n  // const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const { targetRef, dimensions } = useRefDimensions({\n    width: 0,\n    height: 0,\n  });\n  const onMouseInput = props.onMouseInput;\n  const pressedKeys = props.pressedKeys || [];\n\n  //set listeners for mouse input\n  const [mouseButton, setMouseButton] = useState(false);\n  useEffect(() => {\n    const handleMouseDown = (event) => {\n      // console.log(event.button);\n      let target = event.target;\n      if (target.id && event.button === 0) {\n        setMouseButton(true);\n\n        if (onMouseInput && target.className.split(' ')[0] === 'piano-key') {\n          // send note on event\n          onMouseInput([\n            0x09 << 4,\n            parseInt(target.id.substr(1, target.id.length), 10),\n            127,\n          ]);\n        }\n      }\n    };\n    const handleMouseUp = (event) => {\n      setMouseButton(false);\n\n      let target = event.target;\n      if (target.id && event.button === 0) {\n        if (onMouseInput && target.className.split(' ')[0] === 'piano-key') {\n          // send note off event\n          onMouseInput([\n            0x08 << 4,\n            parseInt(target.id.substr(1, target.id.length), 10),\n            0,\n          ]);\n        }\n      }\n    };\n    const handleMouseMove = (event) => {\n      if (event.which === 1) {\n        let target = event.target;\n        if (target.id && mouseButton) {\n          if (onMouseInput && target.className.split(' ')[0] === 'piano-key') {\n            onMouseInput([\n              0x09 << 4,\n              parseInt(target.id.substr(1, target.id.length), 10),\n              127,\n            ]);\n            return;\n          }\n        }\n        onMouseInput([0x0b << 4, 123, 0]); //stop all notes event\n      }\n    };\n\n    if (onMouseInput) {\n      window.addEventListener('mousedown', handleMouseDown);\n      window.addEventListener('mouseup', handleMouseUp);\n      window.addEventListener('mousemove', handleMouseMove);\n    }\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n      window.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [onMouseInput, mouseButton]);\n\n  let noteWidth = props.noteWidth || 38;\n  let noteOffset = 0;\n\n  //calculates the key width and offset to stretch the piano horizontally in the container if fitHorizontally is sent\n  if (props.fitHorizontally) {\n    let wk = whiteKeysAmount(\n      getMidiKeyCode(props.initialNote),\n      getMidiKeyCode(props.finalNote)\n    );\n    noteWidth = Math.floor(dimensions.width / wk);\n    noteOffset = (dimensions.width - wk * noteWidth) / 2;\n  }\n\n  //calculates the offset to centralize in the container if props.alignCenter is sent, it might extrapolate the screen size\n  //but now you can control the key sizes\n  if (props.alignCenter) {\n    let wk = whiteKeysAmount(\n      getMidiKeyCode(props.initialNote),\n      getMidiKeyCode(props.finalNote)\n    );\n    noteOffset = (dimensions.width - wk * noteWidth) / 2;\n  }\n\n  const whiteNoteWidth = props.whiteNoteWidth || noteWidth;\n  const whiteNoteHeight = props.whiteNoteHeight || whiteNoteWidth * 3.125;\n  const blackNoteWidth = props.blackNoteWidth || whiteNoteWidth * 0.6;\n  const blackNoteHeight = props.blackNoteHeight || whiteNoteHeight * 0.63;\n  let initialNote = props.initialNote ? getMidiKeyCode(props.initialNote) : 21; //A0 is default\n  let finalNote = props.initialNote ? getMidiKeyCode(props.finalNote) : 108; //C8 is default\n\n  initialNote = isWhiteKey(initialNote) ? initialNote : initialNote + 1;\n  finalNote = isWhiteKey(finalNote) ? finalNote : finalNote - 1;\n\n  //L is the distance between two black keys (except D# and F# )\n  const L = useMemo(() => {\n    return parseInt(whiteNoteWidth) / 2;\n  }, [whiteNoteWidth]);\n\n  //L1 is the distance from the end of D# key to F key\n  // and the ditance from C to C#\n  const L1 = useMemo(() => {\n    return (3 * whiteNoteWidth - 2 * blackNoteWidth - L) / 2;\n  }, [L, whiteNoteWidth, blackNoteWidth]);\n\n  // Distance from F to F# and the end of A# to B\n  const L2 = useMemo(() => {\n    return (4 * whiteNoteWidth - 3 * blackNoteWidth - 2 * L) / 2;\n  }, [L, whiteNoteWidth, blackNoteWidth]);\n\n  let keys = [];\n\n  //keys is an array that contains info about all keys that should be rendered\n  // key -> midi code of the key\n  // keyClass -> class that will be added to the html element indicating if it's a white or black key\n  // style -> css style of the key\n  keys = useMemo(() => {\n    let arr = [];\n    let whiteKeysAmount = 0;\n\n    //loop through all the keys the Piano container should render\n    for (let i = initialNote; i <= finalNote; i++) {\n      if (!getFullNote(i).includes('#')) {\n        //white key\n\n        arr.push({\n          key: i,\n          keyClass: 'piano-key white-key',\n          style: {\n            width: `${whiteNoteWidth}px`,\n            height: `${whiteNoteHeight}px`,\n            top: '0px',\n            left: `${\n              parseInt(whiteNoteWidth, 10) * whiteKeysAmount + noteOffset\n            }px`,\n          },\n        });\n\n        whiteKeysAmount++;\n      } else {\n        //black key\n\n        arr.push({\n          key: i,\n          keyClass: 'piano-key black-key',\n          style: {\n            width: `${blackNoteWidth}px`,\n            height: `${blackNoteHeight}px`,\n            top: '0px',\n            left:\n              noteOffset +\n              getBlackKeyOffset(\n                i,\n                initialNote,\n                whiteNoteWidth,\n                blackNoteWidth,\n                L,\n                L1,\n                L2\n              ),\n          },\n        });\n      }\n    }\n    return arr;\n  }, [\n    L,\n    L1,\n    L2,\n    blackNoteHeight,\n    blackNoteWidth,\n    finalNote,\n    initialNote,\n    whiteNoteHeight,\n    whiteNoteWidth,\n    noteOffset,\n  ]);\n\n  const renderKeys = () => {\n    return keys.map((note) => {\n      //adds the class key-pressed to white-keys or black-keys if the Piano component receives pressed keys as props\n      let keyClass = pressedKeys.map((n) => n.midiValues[1]).includes(note.key)\n        ? `${note.keyClass} key-pressed`\n        : note.keyClass;\n\n      return (\n        <div\n          key={note.key}\n          id={`n${note.key}`}\n          className={keyClass}\n          style={note.style}\n        ></div>\n      );\n    });\n  };\n\n  return (\n    <div\n      className=\"piano-container\"\n      ref={targetRef}\n      style={{\n        height: `${whiteNoteHeight}px`,\n      }}\n    >\n      {renderKeys()}\n    </div>\n  );\n};\n\nexport default Piano;\n","/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/hooks/useMidiController.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/utils/constants.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/utils/midiParser.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/components/SelectList.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/hooks/useSoundFont.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/hooks/useRefDimensions.js",[],"/run/media/link/Seagate Expansion Drive/projetos/midi/Notes/react-virtual-piano/src/hooks/useMidiInputs.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":40,"nodeType":"123","messageId":"124","endLine":1,"endColumn":46},{"ruleId":"115","replacedBy":"125"},{"ruleId":"117","replacedBy":"126"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":40,"nodeType":"123","messageId":"124","endLine":1,"endColumn":46},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],["127"],["128"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar",["127"],["128"],"no-global-assign","no-unsafe-negation"]